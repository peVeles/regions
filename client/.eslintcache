[{"/home/veles/WebstormProjects/untitled/client/src/index.tsx":"1","/home/veles/WebstormProjects/untitled/client/src/reportWebVitals.ts":"2","/home/veles/WebstormProjects/untitled/client/src/App.tsx":"3","/home/veles/WebstormProjects/untitled/client/src/api/regions/regions.api.ts":"4","/home/veles/WebstormProjects/untitled/client/src/api/api.config.ts":"5","/home/veles/WebstormProjects/untitled/client/src/api/request.ts":"6","/home/veles/WebstormProjects/untitled/client/src/utils/regions.utils.ts":"7","/home/veles/WebstormProjects/untitled/client/src/components/Header/Header.tsx":"8","/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavBlock/NavBlock.tsx":"9","/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavBlock/NavTree/NavTree.tsx":"10","/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavScreen.tsx":"11"},{"size":500,"mtime":1611474084410,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1611474084410,"results":"14","hashOfConfig":"13"},{"size":317,"mtime":1611598137321,"results":"15","hashOfConfig":"13"},{"size":303,"mtime":1611477032180,"results":"16","hashOfConfig":"13"},{"size":98,"mtime":1611486339212,"results":"17","hashOfConfig":"13"},{"size":262,"mtime":1611598715376,"results":"18","hashOfConfig":"13"},{"size":1178,"mtime":1611598679504,"results":"19","hashOfConfig":"13"},{"size":224,"mtime":1611483085703,"results":"20","hashOfConfig":"13"},{"size":669,"mtime":1611598911957,"results":"21","hashOfConfig":"13"},{"size":1250,"mtime":1611599390794,"results":"22","hashOfConfig":"13"},{"size":968,"mtime":1611599315943,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"9ocj2k",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/veles/WebstormProjects/untitled/client/src/index.tsx",[],["48","49"],"/home/veles/WebstormProjects/untitled/client/src/reportWebVitals.ts",[],"/home/veles/WebstormProjects/untitled/client/src/App.tsx",[],"/home/veles/WebstormProjects/untitled/client/src/api/regions/regions.api.ts",[],"/home/veles/WebstormProjects/untitled/client/src/api/api.config.ts",[],"/home/veles/WebstormProjects/untitled/client/src/api/request.ts",[],"/home/veles/WebstormProjects/untitled/client/src/utils/regions.utils.ts",["50"],"import { region, regionsGraph, regionsTree } from \"../types/region\";\n\nexport const buildGraphByRegions = (regions: region[]): regionsTree => {\n    if(!Array.isArray(regions))\n        return regions;\n\n    /* Here we build graph (adjacency list) by data, gotten from server */\n\n    const graph: regionsGraph = {};\n    const roots = new Set<number>();\n\n    regions.forEach(region => {\n        // Taking path\n        const vertexes = region.path.split('.').map(r => { return +r });\n        // Adding root vertex\n        vertexes && roots.add(vertexes[0]);\n        // Filling the adjacency list using the data of the current path\n        for(let i = 0; i < vertexes.length - 1; ++i) {\n            const from = vertexes[i]; const to = vertexes[i + 1];\n            !graph[from] ? graph[from] = new Set([to]) : graph[from].add(to);\n        }\n        // Taking into account, that last vertex may not have any children\n        !graph[vertexes[vertexes.length - 1]] && (graph[vertexes[vertexes.length - 1]] = new Set());\n    });\n\n    return {\n        vertexes: regions.reduce((obj:{[key: number]: string}, item) => (obj[item.id] = item.name, obj) ,{}),\n        graph,\n        roots\n    }\n}","/home/veles/WebstormProjects/untitled/client/src/components/Header/Header.tsx",[],"/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavBlock/NavBlock.tsx",[],"/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavBlock/NavTree/NavTree.tsx",[],"/home/veles/WebstormProjects/untitled/client/src/screens/NavScreen/NavScreen.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":27,"column":98,"nodeType":"57","messageId":"58","endLine":27,"endColumn":99},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]